class Solution {
public:
    // Function to remove the nth node from the end of the linked list
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* current = head;  // Pointer to traverse the list
        int length = 0;  // Variable to store the length of the linked list
        
        // Step 1: Calculate the total length of the linked list
        while (current != nullptr) {  // Traverse the list until reaching the end
            current = current->next;  // Move to the next node
            length++;  // Increment the length counter
        }

        // Step 2: Check if the node to remove is the head (i.e., first node)
        if (n == length) {  // If n is equal to the length of the list
            ListNode* temp = head;  // Store the head node in a temporary variable
            head = head->next;  // Move the head pointer to the next node
            delete temp;  // Delete the original head node
            return head;  // Return the new head
        }

        // Step 3: Reset the current pointer back to the head of the list
        current = head;

        // Step 4: Find the node just before the one we want to remove
        // We need to stop at (length - n - 1)th node, so we use a loop to move current
        for (int i = 1; i < length - n; i++) {
            current = current->next;  // Move to the next node
        }

        // Step 5: Remove the nth node from the end
        ListNode* nodeToDelete = current->next;  // Store the node to be deleted
        current->next = current->next->next;  // Bypass the node to be deleted
        delete nodeToDelete;  // Delete the unwanted node

        return head;  // Return the head of the updated list
    }
};
