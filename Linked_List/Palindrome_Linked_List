/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // Function to check if a linked list is a palindrome
    bool isPalindrome(ListNode* head) {
        // If the list is empty or has just one node, it's automatically a palindrome
        if (head == nullptr || head->next == nullptr) return true;

        // Step 1: Use two pointers to find the middle of the list
        ListNode* slow = head;  // Slow pointer moves one step at a time
        ListNode* fast = head;  // Fast pointer moves two steps at a time

        // Move slow to the middle and fast to the end
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Step 2: Reverse the second half of the list starting from the middle
        ListNode* prev = nullptr;    // Previous pointer for reversing
        ListNode* current = slow;    // Current node pointer
        ListNode* next = nullptr;    // Temporary pointer to store next node during reversal

        // Reverse the second half of the list
        while (current != nullptr) {
            next = current->next;    // Store the next node
            current->next = prev;    // Reverse the current node's pointer
            prev = current;          // Move prev to the current node
            current = next;          // Move current to the next node
        }

        // Step 3: Compare the first half with the reversed second half
        ListNode* secondHalf = prev;  // Pointer to the head of the reversed second half
        ListNode* firstHalf = head;   // Pointer to the head of the original list

        // Compare the values of both halves
        while (secondHalf != nullptr) {
            if (firstHalf->val != secondHalf->val) {
                return false;  // If values don't match, it's not a palindrome
            }
            firstHalf = firstHalf->next;
            secondHalf = secondHalf->next;
        }

        // If all values match, it's a palindrome
        return true;
    }
};
